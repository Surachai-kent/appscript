#!/usr/bin/env python

from sys import argv, exit
import string
try:
	from osaterminology import makeidentifier
except Exception, e:
	exit("Couldn't import osaterminology module (%s). Please check that Python appscript is correctly installed, then try again." % e)


ReservedKeywords = [
	"==",
	"===",
	"=~",
	"AS_aemreference",
	"AS_appdata",
	"ID",
	"[]",
	"__id__",
	"__send__",
	"_aemApplicationClass",
	"_resolveRangeBoundary",
	"_sendCommand",
	"after",
	"and",
	"any",
	"before",
	"class",
	"clone",
	"commands",
	"contains",
	"display",
	"doesnotcontain",
	"doesnotendwith",
	"doesnotstartwith",
	"dup",
	"elements",
	"end",
	"endswith",
	"endtransaction",
	"eq",
	"eql?",
	"equal?",
	"extend",
	"first",
	"freeze",
	"frozen?",
	"ge",
	"gt",
	"hash",
	"id",
	"ignore",
	"inspect",
	"instance_eval",
	"instance_of?",
	"instance_variable_get",
	"instance_variable_set",
	"instance_variables",
	"is_a?",
	"isin",
	"isnotin",
	"keywords",
	"kind_of?",
	"last",
	"launch",
	"le",
	"lt",
	"method",
	"method_missing",
	"methods",
	"middle",
	"ne",
	"next",
	"nil?",
	"not",
	"object_id",
	"or",
	"parameters",
	"previous",
	"private_methods",
	"properties",
	"protected_methods",
	"public_methods",
	"respond_to?",
	"resulttype",
	"send",
	"singleton_methods",
	"start",
	"startswith",
	"starttransaction",
	"taint",
	"tainted?",
	"telltarget",
	"timeout",
	"to_a",
	"to_s",
	"type",
	"untaint",
	"useterminology",
	"waitreply",
]

_reservedPrefix = 'AS_'

_specialConversions = {
		' ': '_',
		'-': '_',
		'&': 'and',
		'/': '_',
		}

_cache = {}

_legalChars = string.ascii_letters + '_'
_alphanum = _legalChars + string.digits

def convert(s):
	"""Convert unicode string to Ruby identifier.
		s : string or unicode
		Result : string
	"""
	if not _cache.has_key(s):
		legal = _legalChars
		res = ''
		for c in s:
			if c in legal:
				res += c
			elif _specialConversions.has_key(c):
				res += _specialConversions[c]
			else:
				if res == '':
					res = '_' # avoid creating an invalid identifier
				res += '0x%2.2X' % ord(c)
			legal = _alphanum
		if res in ReservedKeywords or res.startswith('_') or res.startswith(_reservedPrefix):
			res += '_'
		_cache[s] = str(res)
	return _cache[s]

makeidentifier.convert = convert # monkey-patch the makeidentifier module before use

from osaterminology.renderers import htmldoc

if len(argv) == 3:
	htmldoc.doc(argv[1], argv[2])
else:
	print """Usage: 

rbosadict app-name html-file

	app-name -- name or full path of application

	html-file -- path to write HTML file to

Examples:

rbosadict /Applications/TextEdit.app ~/TextEdit.html

rbosadict Finder ~/Finder.html

Known issues:

- Paths must be absolute or start with '~'; paths relative to working directory aren't supported.
"""