2006-11-16 -- ???

- removed path expansion in FindApp#byName, MacFile::Alias#at, MacFile::FileURL#at

- changed default send flags to KAE::KAECanSwitchLayer + KAE::KAEWaitReply (same as AppleScript)

- aliased AE::MacOSError#number to #to_i; added #to_s and #inspect methods

- added #to_s and #inspect methods to AE::AEDesc

- fixed undefined variable bug in FindApp#byName when raising an ApplicationNotFoundError

- added osax module and documentation

- added event handling code to rbae.c (not yet fully tested)

- added gemspec for source-based gem

- made Reference class's AS_appdata and AS_aemreference instance variables writeable as well as readable - this'll make it easier to inject workarounds (e.g. modified pack/unpack routines) for occasional application flaws

- added sample scripts: Build_iTunes_playlist_for_local_files.rb, Simple_Finder_GUI_Scripting.rb

- now always packs a 'subj' attribute; this is normally a null descriptor. (Note: AS always seems to include a subj attribute for the make command. Photoshop CS2's make command requires either an 'at' parameter or 'subj' attribute and throws an error if it doesn't get one. Including a subj attribute by default should hopefully prevent any complaints.) [BB]

- removed built-in :telltarget argument to simplify the API a bit. Now, if a command is called on a reference and already has a direct parameter, the reference is packed as the subject attribute instead. Also, 'telltarget' is no longer a reserved word.

- true and false are now packed as AEDescs of typeTrue and typeFalse (same as AppleScript), not typeBoolean [BB]

- when hashes containing a :class or AEType.new('pcls') key whose value is a Symbol or AEBaseType instance are packed, the resulting AEDesc is now coerced to that type (previously the class property was packed as just another key-value pair, and the result was an AEDesc of typeAERecord) [BB]

- codecs module now unpacks a record-like AEDesc with an unknown type as a hash containing an additional 'class' property that indicates the original type (i.e. same as AppleScript)

- aliased AEM::CommandError#number to #to_i

- where property and element names are the same (e.g. file, text in BBEdit), appscript now packs this as a property specifier, unless the name is 'text', in which case it's packed as an elements specifier (i.e. [hopefully] same as AppleScript)

- renamed macfile.rb/MacFile module to mactypes.rb/MacTypes

- renamed MacTypes::Alias, MacTypes::MacFileURL methods: 

	Alias.at -> Alias.path
	FileURL.at -> FileURL.path
	Alias.newDesc -> Alias.desc
	FileURL.newDesc -> FileURL.desc

- renamed AS.app methods:

	app#byName -> app#by_name
	app#byCreator -> app#by_creator
	app#byID -> app#by_id
	app#byPID -> app#by_pid
	app#byURL -> app#by_url

- renamed appscript reference methods:

	startswith -> starts_with
	endswith -> ends_with
	isin -> is_in
	doesnotstartwith -> does_not_start_with
	doesnotendwith -> does_not_end_with
	doesnotcontain -> does_not_contain
	isnotin -> is_not_in

- renamed built-in appscript command parameters:

	:waitreply -> :wait_reply
	:resulttype -> :result_type

- renamed AEM::Application methods:

	Application.newPath -> Application.by_path
	Application.newURL -> Application.by_url
	Application.newPID -> Application.by_pid
	Application.newAEDesc -> Application.by_desc

- renamed aem reference methods:

	byindex -> by_index
	byname -> by_name
	byid -> by_id
	byrange -> by_range
	byfilter -> by_filter
	startswith -> starts_with
	endswith -> ends_with
	isin -> is_in

- renamed FindApp methods:

	FindApp.byName -> FindApp.by_name
	FindApp.byCreator -> FindApp.by_creator
	FindApp.byID -> FindApp.by_id

- changed type names in defaultterminology.rb to be more AppleScript-like, e.g. :String -> :string, :MissingValue -> :missing_value (note that there are still a few deliberate differences, e.g. :float instead of :real)

- added month and weekday name-code definitions to defaultterminology.rb

- changed internal variable and method names to follow Ruby style guidelines

- added MacTypes::Units class

- fixed appscript reference rendering bug where property/element names could get muddled (e.g. 'document' property would appear as 'documents')

- fixed endian bug when packing/unpacking AEM::AEEventName (now always big-endian)

- fixed wierd rendering bug where rendered references would be invisible if client script contained an 'app' method of its own (Ruby was invoking this instead of ReferenceRenderer#method_missing)

- fixed bug in AEM::Application#end_transaction

- moved findapp.rb and mactypes.rb to _aem/ (they're already re-exported by aem.rb, appscript.rb, etc. so clients don't need to require them directly)

- 'help' is now a reserved word (though is not currently implemented)

- Attempting to pack invalid UTF8 strings now raises TypeError instead of AEM::NotUTF8TextError


2006-10-23 -- 0.1.6

- improved test_aemreference.rb

- fixed bug in aemreference.rb where comparing two non-equivalent aem references could return true

- simplified four-char-code conversion routines in codecs.rb

- AS::Reference#methods now returns names of application-defined properties, elements and commands in addition to names of built-in methods [MN]

- AS::Reference#respond_to? now returns true for names of application-defined properties, elements and commands in addition to names of built-in methods [MN]

- removed rbosadict; use ASDictionary.app instead (available from <http://appscript.sourceforge.net>)

- removed AS::Application#useterminology; added optional 'terms' argument to Application constructors instead

- in Terminology module, changed timeout for ascrgdte event from 120 to 30 sec

- added dump tool + documentation

- added info to manual on scripting non-stay-open applications

- removed MacFile::Alias#newPath and MacFile::FileURL#newPath constructors (use #at instead)

- changed MacFile::Alias#to_s and MacFile::FileURL#to_s to return plain path string instead of object representation (use #inspect for that)

- removed MacFile::Alias#path and MacFile::FileURL#path (use #to_s instead)

- added macfile manual


2006-10-18 -- 0.1.5

- renamed MacFile::Alias#newPath, MacFile::FileURL#newPath to Alias#at and FileURL#at for conciseness; e.g.: FileURL.at("/some/path"). Note: newPath methods will be removed in 0.2.0.

- appscript module now packs UInt32 csig attributes correctly [DH]

- fixed little-endian bugs when packing and unpacking typeSInt64 and typeLongDateTime

- packing and unpacking typeLongDateTime AEDescs is now about as accurate as can be expected, given the inherent problems of LongDateTime (i.e. UCConvertLongDateTimeToCFAbsoluteTime and UCConvertCFAbsoluteTimeToLongDateTime have off-by-an-hour [or whatever the local difference is] inaccuracies at ST/DST/ST boundaries)

- improved error reporting in MacFile module: creating a MacFile::Alias object with a path to a non-existent filesystem object, getting path for MacFile::Alias object that no longer identifies a valid filesystem object, etc. now raises MacFile::FileNotFoundError instead of various MacOSErrors

- comparison methods' arguments now display correctly when to_s/inspect is called on its-based references

- its-based aem references now correctly unpack KAEContains comparison descriptors as 'reference.isin(value)', rather than trying to unpack them incorrectly as 'value.contains(reference)'

- first/middle/last/any references now compare correctly with identical references that have been previously packed and unpacked. Previously the codecs module was unpacking them with different _key attributes, so equality tests would always return false even when the two references were identical.

- Attempting to pack invalid UTF8 strings now raises AEM::NotUTF8TextError rather than AE::MacOSError -1700.

- fixed launch method (was calling non-existent Connect.launch, not Connect.launchApp)

- attempting to retrieve aete resource from an application that doesn't have any terminology no longer raises 'resource not found' (-192) error

- AEM module now re-exports AE::MacOSError class for convenience

- Apple Event Manager-raised errors that occur when sending events are now reported correctly (was giving 'uninitialized constant Send::Event::None' errors)

- appscript referencerenderer module now renders class names in next and previous references correctly

- GenericReference#to_s now includes 'AS.' prefix when rendering string representations of generic references

- fixed ==() methods in appscript Reference and aem Application classes

- implemented eql? methods so aem types, aem references and appscript references should now work correctly as hash keys

- fixed endian bugs in Codecs when unpacking insertion location selectors and comparison and logic operators


2006-10-15 -- 0.1.4

- fixed error message when reporting an unknown parameter (was showing command name, not parameter name)

- fixed bug in TextEdit_demo.rb script (count command's parameter should be :each, not :each_)

- fixed bug where typeBoolean AEDescs would always unpack as true

- fixed bugs when packing and unpacking AEDescs of typeSInt64

- integers between 2*31 and 2**63-1 now pack as typeSInt64, not typeFloat

- [mostly] fixed timezone and winter/summer time bugs; there's probably still problems at the points where DST begins and ends (some of which may be Ruby's fault; this is still to be determined)


2006-10-13 -- 0.1.3

- fixed a bug in appscript where the first argument in a command call would be ignored if it was false or nil [MN]

- changed priority order for determining what an ambiguous keyword (e.g. :workbook in Excel) that may be either a type or enumerator name should be packed as; previously typeEnumerated was the default, now it's typeType [MN]


2006-10-12 -- 0.1.2

- fixed a bug where appscript was unpacking typeEnumerated AEDescs as AEM::AEEnums instead of Symbols [MN]


2006-10-10 -- 0.1.1

- made several corrections and improvements to appscript manual [MN]


2006-10-09 -- 0.1.0

- first release