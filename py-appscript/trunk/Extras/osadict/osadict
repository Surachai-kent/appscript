#!/usr/bin/env python

"""osadict -- interactive application dictionary viewer/exporter

Copyright (C) 2006 HAS <http://appscript.sourceforge.net>

Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
"""

from getopt import getopt
from sys import argv, stderr, exit
try:
	import readline
except:
	pass
import textwrap
from commands import getstatusoutput

from appscript import helpsystem, terminology
from osaterminology.getterminology import getaete
from osaterminology.dom import aeteparser, osadictionary
from osaterminology.renderers import htmldoc
import aem

_domain = 'net.sourceforge.appscript.osadict'

_styles = {
		'as': 'applescript',
		'py': 'py-appscript',
		'rb': 'rb-appscript',
		'applescript': 'applescript',
		'py-appscript': 'py-appscript',
		'rb-appscript': 'rb-appscript',
		}


_viewerhelp = """    Viewer Options

    The following viewer options are used to display dictionary information
    in both interactive and non- interactive modes:

    -o                            overview of all suites, classes and 
                                  commands

    -k                            list built-in keywords (type names)
    
    -u [suite-name]               summary of the specified suite (default is
                                  all suites)

    -t [class-or-command-name]    terminology for the specified class/command
                                  (default is application)

    -i [class-name]               inheritance tree for the specified class
                                  (default is all classes)

    -r [class-name]               Apple Event Object Model relationships for 
                                  the specified class (default is application)

    Arguments are optional.
    
    In non-interactive mode, if no options are given then the -o option is 
    used.
    
    Each option and argument must be separated by whitespace.

    In a relationships graph (see '-r' option):
    
    *    one-to-one relationships are shown as '-PROPERTY_NAME <CLASS>'
    *    one-to-many relationships are shown as '=ELEMENT_NAME'
    *    a trailing arrow, '->', indicates where deeper relationships exist.
    
    Viewer Commands
    
    The interactive viewer also accepts the following control commands
    (acceptable abbreviations are shown in parentheses):
    
    default NAME [VALUE]    (d)     get/set a default setting
    
    exit                    (e)     exit interactive viewer
    
    help                    (h)     print viewer options
    
    show all                (sa)    show all suites, classes and commands
    
    show hidden             (sh)    show hidden suites, classes and commands
                                    only
    
    show visible            (sv)    show visible suites, classes and commands
                                    only (default is show visible)

    The following defaults are currently supported:
    
    *    style [formatting style, e.g. py-appscript]
    *    wrap [max number of characters per line, e.g. 78]
    
    Changes to default settings will take effect the next time osadict is run.
"""


_generalhelp = """NAME

    osadict -- interactive application dictionary viewer/exporter

SYNOPSIS

    osadict -H [ -a ] [ -c ] [ -s style ] app-or-osax-name

    osadict [ -N ] [ -s style ] app-or-osax-name [ viewer-options ]
    
    osadict -h


DESCRIPTION

    osadict provides options for viewing and exporting scriptable application
    and scripting addition dictionaries. It has three operating modes:
    
    *    interactive viewer
    *    non-interactive viewer
    *    HTML exporter
    
   Command Options

    The following options are available:
    
    -H         export dictionary as HTML data
    
    -N         run viewer in non-interactive mode

    -a         when used with -H option, shows all classes including hidden 
               ones
    
    -c         when used with -H option, collapses classes that appear in
               multiple suites into one
    
    -h         show this help
    
    -s name    output style (default is py-appscript):

    The -s option currently supports the following formatting styles
    (acceptable abbreviations are shown in parentheses):
    
    *    applescript      (as)
    *    py-appscript     (py)
    *    rb-appscript     (rb)
    
    The -H and -N options are mutually exclusive. If neither is given, the
    viewer runs in interactive mode (the default).
    
""" + _viewerhelp + """

EXAMPLES

    osadict -N Finder -o -k -i file -i folder
    
    osadict -cH TextEdit.app > TextEdit.html
    
    osadict -s rb eppc://remote-mac.local/iCal
    iCal> -u
    iCal> -t view_calendar
    iCal> -t calendar -i calendar -r calendar
    
    osadict -s as StandardAdditions -t display dialog
    StandardAdditions> -t dialog reply
    
    osadict Finder
    Finder> default style
    py-appscript
    Finder> default style rb-appscript
    Finder> default wrap 140
    Finder> exit
"""

#######

def getpref(name, default):
	err, val = getstatusoutput("defaults read %s %s" % (_domain, name))
	if err:
		err, val = getstatusoutput("defaults write %s %s '%s'" % (_domain, name, default))
		if err:
			print >> stderr, "Can't read/write defaults: %s (%r)" % (val, err)
		return default
	return val


def setpref(name, val):
	err, val = getstatusoutput("defaults write %s %s '%s'" % (_domain, name, val))
	if err:
		print >> stderr, "Can't read/write defaults: %s (%r)" % (val, err)


#######

_defaultstyle = 'py-appscript'
_defaultwrap = 78

#######

try:
	wrap = int(getpref('wrap', _defaultwrap))
except:
	print >> stderr, "Bad default wrap: %s; using %s instead." % (getpref('wrap', _defaultwrap), _defaultwrap)
	wrap = _defaultwrap

class _Out:
	"""Outputs lines wrapped to fit in (by default) 80 column terminal window."""
	
	def __init__(self, width=wrap):
		import textwrap
		self._textwrapper = textwrap.TextWrapper(width=width, subsequent_indent=' ' * 12)
	
	def write(self, s):
		if s == '\n':
			print
		elif '\n' in s:
			lst = s.split('\n')
			for para in lst[:-1]:
				self.write(para)
				self.write('\n')
			self.write(lst[-1])
		else:
			print self._textwrapper.fill(s.encode('utf8', 'replace')),

_out = _Out()


#######

_osaxpathsbyname = {}
#_se = app(id='com.apple.systemevents')
_se = aem.Application(aem.findapp.byid('com.apple.systemevents'))
#for domain in [_se.system_domain, _se.local_domain, _se.user_domain]:
for domain in ['flds', 'fldl', 'fldu']:
#	osaxen = domain.scripting_additions_folder.files[
#			(its.file_type == 'osax').OR(its.name_extension == 'osax')]
	osaxen = aem.app.property(domain).property('$scr').elements('file').byfilter(
			aem.its.property('asty').eq('osax').OR(aem.its.property('extn').eq('osax')))
#	for name, path in zip(osaxen.name(), osaxen.POSIX_path()):
	for name, path in zip(_se.event('coregetd', {'----': osaxen.property('pnam')}).send(), 
			_se.event('coregetd', {'----': osaxen.property('posx')}).send()):
		if name.lower().endswith('.osax'):
			name = name[:-5]
		_osaxpathsbyname[name.lower()] = path

#######

opts, args = getopt(argv[1:], 'NHs:cah')

if not args:
	print _generalhelp
	exit()

# parse osadict arguments
opts = dict(opts)
style = opts.get('-s', getpref('style', _defaultstyle)).lower()
if not _styles.has_key(style):
	print >> stderr, "Unknown style: %s; using %s instead." % (style, _defaultstyle)
	style = _defaultstyle
style = _styles.get(style)
appname = unicode(args[0], 'utf8')
vieweroptions = ' '.join(args[1:]).strip()

# see if name matches an installed scripting addition
isosax = _osaxpathsbyname.has_key(appname.lower())
if isosax:
	appname = _osaxpathsbyname[appname.lower()]

# get aete data
shortname = appname.split('/')[-1]
if isosax:
	aetedata = getaete(appname)
else:
	if appname.startswith('eppc://'):
		aemapp = aem.Application(url=appname)
		aetedata = terminology.aetedataforapp(aemapp)
	else:
		aetedata = getaete(aem.findapp.byname(appname))

# render/export
if opts.has_key('-h'):
	print _generalhelp
elif opts.has_key('-H'):
	terms = aeteparser.parsedata(aetedata, appname, style)
	options = [option for flag, option in [('-c', 'collapse'), ('-a', 'showall')] if opts.has_key(flag)]
	print htmldoc.renderdictionary(terms, style, options)
else:
	helpobj = helpsystem.Help(aetedata, appname, style, _out)
	del helpobj._handlers['h']
	del helpobj._handlers['s']
	if opts.has_key('-N'):
		helpobj.help(vieweroptions or '-o')
	else:
		if vieweroptions:
			helpobj.help(vieweroptions)
		while 1:
			try:
				vieweroptions = raw_input(shortname+'> ').strip()
			except EOFError:
				print
				break
			except KeyboardInterrupt:
				print
				continue
			if vieweroptions:
				if vieweroptions.startswith('-'):	
					helpobj.help(vieweroptions)
				elif vieweroptions in ['e', 'exit']:
					exit()
				elif vieweroptions in ['h', 'help']:
					print '\nViewer Help\n'
					print _viewerhelp
				elif vieweroptions in ['sa', 'show all']:
					helpobj.terms.setvisibility(osadictionary.kAll)
				elif vieweroptions in ['sh', 'show hidden']:
					helpobj.terms.setvisibility(osadictionary.kHidden)
				elif vieweroptions in ['sv', 'show visible']:
					helpobj.terms.setvisibility(osadictionary.kVisible)
				else:
					args = vieweroptions.split()
					cmd = args.pop(0)
					if cmd in ['d', 'default']:
						name = args.pop(0)
						if args:
							val = args[0]
						else:
							val = None
						if name == 'style':
							if val:
								try:
									setpref('style', _styles[val])
								except KeyError:
									print >> stderr, 'Unknown style: %s' % val
							else:
								print getpref('style', _defaultstyle)
						elif name == 'wrap':
							if val:
								try:
									setpref('wrap', int(val))
								except ValueError:
									print >> stderr, 'Bad wrap value: %s' % val
							else:
								print getpref('wrap', _defaultwrap)
						else:
							print >> stderr, 'Unknown default: %s' % vieweroptions
					else:
						print >> stderr, 'Unknown command: %s' % vieweroptions
					

