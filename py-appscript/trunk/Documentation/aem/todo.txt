TO DO

- following should work but doesn't:

	Application('/System/Library/CoreServices/Finder.app').event('coregetd', {'----': app.elements('pcap')}).send()
	# aem.send.send.CommandError: CommandError -1799: Mac OS error code -1799


- better error reporting (i.e. CommandError should allow clients to obtain type, object, application, etc. information when available)


- Any other Python/AE type/class unpack routines needed? (See [e.g.] AEDataModel.h) e.g.:

	unpack:
	- typeDecimalStruct ? # preferred

	- typeExtended ? Float80; coerce to type128BitFloatingPoint and decode that? # non-preferred
	- typeAEText ?
	- typeTextStyles

What about packing/unpacking application identifiers?


- Should typeStyledText, typeStyledUnicodeText be coerced and decoded as typeUnicodeText? (Note: this is a lossy conversion that throws away style info.) Or should we define a unicode subclass that retains style info?


- decide how to support sending AEs from non-main threads: either have aem/user manage Mach ports (tricky to do automatically, tedious to do manually), or create a fresh port each time (speed impact seems to be negligble; any other issues?) Note: aem is now using the latter approach, although this decision has not yet been finalised; if any unexpected problems arise, this will need to be changed.


- support for default 'open' events (i.e. where aevtodoc event is passed via LaunchApplication)


----------------------------------------------------------------------
Following will probably be rejected as too hard or not important enough to do:

- expose reply event unpacking routine, e.g. for unpacking OSADoEvent result?


- add overrideable packfailed(), unpackfailed() methods to Codecs?


- Reference comparisons should be case-insensitive, in keeping with how they're normally handled by applications. e.g.:

app.property('home').elements('fold').byname('Documents') == app.property('home').elements('fold').byname('documents') # should return True


- Following examples should evaluate as True:

print its.ne(3) == its.eq(3).NOT
print its == its.eq(True)

(Solution would be to resolve both [e.g. into simple lists?] and compare the resolved versions which should both share the same form.)


- wrap loose CarbonX.AE.AEDescs as aem.AEDesc to avoid users coupling code directly to Carbon(X).AE when using AEDescs (and have appscript reexport this class for convenience), adding better __repr__ support # wrapping returned AEDescs is easy enough, but allowing clients to construct them from scratch isn't


- decide whether to use typeUnicodeText or typeUTF16ExternalRepresentation when packing Unicode text (i.e. former is not recommended due to endianness issues, but latter may not be as backwards-compatible). Note: will stick with typeUnicodeText for compatibility's sake for the time being as some less-well applications appear to have problems with other types
