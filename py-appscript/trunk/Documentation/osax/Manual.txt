osax

======================================================================
SUMMARY

Provides a function, osax(), for invoking any scripting addition command using raw AE codes, along with basic wrappers for a number of useful Standard Additions commands.


======================================================================
COMMANDS

osax(event, params={}, atts={}, target=kCurrentApplication, timeout=-1) -- Call an OSAX ('OSA eXtension').
	event : str -- 8-letter code indicating event's class, e.g. 'sysobeep'
	params : dict -- a dict of form {code:anything,...} containing zero or more parameters for the event (see aem manual for details)
	atts : dict -- a dict of form {code:anything,...} containing zero or more attributes for the event (see aem manual for details)
	target : Application -- target application, e.g. Application('/Applications/TextEdit.app'); default is 'current' application
	timeout : int -- number of ticks to wait for result before raising timeout error
	Result : anything


#######
# User Interaction Suite  -- Basic commands for interacting with the user

say(text, display=None, voice=None, waiting=None, outputfile=None, app=kCurrentApplication) -- Speak the given text.
	text : str -- the text to speak, which can include intonation characters
	display : str -- the text to display in the feedback window (if different). Ignored unless Speech Recognition is on.
	voice : str -- the voice to speak with.  Ignored if Speech Recognition is on.
	waiting : bool  -- wait for speech to complete before returning (default is true). Ignored unless Speech Recognition is on.
	outputfile : anything -- the alias, file reference or Mac-style path string of an AIFF file (existing or not) to contain the sound output.
	app : aem.send.Application -- the application to use (default = kCurrentApplication)


beep(times=None) -- Beep 1 or more times
	times : int -- number of times to beep


displaydialog(text, buttons=None, defaultbutton=None, defaultanswer=None, icon=None, 
		timeout=None , app=kCurrentApplication) -- Display a dialog box, optionally requesting user input
	text : str -- the text to display in dialog box
	buttons : list of str -- a list of up to three button names
	defaultbutton : int | str -- the name or number of the default button
	defaultanswer : str -- the default editable text
	icon : str | int | kStop | kNote | kCaution -- the name or ID of the icon to display
	timeout : int -- number of seconds to wait before automatically dismissing dialog
	app : aem.send.Application -- the application to use (default = kCurrentApplication)
	Result : (str, str, bool) -- the button clicked (or '' if dialog gave up), text entered (or None if no defaultanswer given), dialog timed-out flag (or None if no timeout given)


displaymessage(text, timeout=None, app=kCurrentApplication) -- shortcut for: 
		displaydialog(text, ['OK'], 1, icon=kNote, timeout=timeout, app=app)


displaywarning(text, stopbydefault=True, app=kCurrentApplication) -- shortcut for: 
		displaydialog(text, ['Stop', 'Continue'], not stopbydefault + 1, icon=kCaution, app=app)[0] == 'Continue'


displayerror(text, buttonname='Quit', app=kCurrentApplication) -- shortcut for: 
		displaydialog(text, [buttonname], icon=kStop, app=app)


chooseitems(items, prompt=None, default=None, multiselelect=None, emptyselect=None, 
		okbutton=None, cancelbutton=None, app=kCurrentApplication) -- Allows user to select an item from a list of strings
	items : list of str -- a list of strings to display (an empty list if no selection)
	prompt : str -- the prompt to appear at the top of the list selection dialog
	default : list of str -- list of strings to initially select
	okbutton : str -- the name of the OK button
	cancelbutton : str -- the name of the Cancel button
	multiselelect : bool -- Allow multiple items to be selected?
	emptyselect : bool -- Can the user make no selection and then choose OK?
	app : aem.send.Application -- the application to use (default = kCurrentApplication)
	Result : list of str -- the list of strings chosen


chooseapp(title=None, prompt=None, multiselect=None, app=kCurrentApplication) -- Choose an application on this machine or the network
	title : str -- the dialog window title
	prompt : str -- the prompt to appear at the top of the application chooser dialog box
	multiselect : bool -- Allow multiple items to be selected?
	app : aem.send.Application -- the application to use (default = kCurrentApplication)
	Result : macfile.Alias | list of macfile.Alias -- path(s) to application(s)


choosefile(prompt=None, onlyshowtypes=None, app=kCurrentApplication) -- Choose a file on a disk or server
	prompt : str -- a prompt to be displayed in the file chooser
	onlyshowtypes : list of str -- restrict the files shown to only these file types (up to 4)
	app : aem.send.Application -- the application to use (default = kCurrentApplication)
	Result : macfile.Alias -- to the chosen file


choosenewfile(prompt=None, defaultname=None, app=kCurrentApplication) -- Get a new file reference from the user, without creating the file
	prompt : str -- the text to display in the file creation dialog box
	defaultname : str -- the default name for the new file
	app : aem.send.Application -- the application to use (default = kCurrentApplication)
	Result: str -- the URL of the file the user specified


choosefolder(prompt=None, app=kCurrentApplication) -- Choose a folder on a disk or server
	prompt : str -- a prompt to be displayed in the folder chooser
	app : aem.send.Application -- the application to use (default = kCurrentApplication)
	Result: macfile.Alias -- chosen folder


chooseurl(showservices=None, editable=None, app=kCurrentApplication) -- Choose a service on the Internet
	showservices : list of kWebServers | kFTPServers | kTelnetHosts | kFileServers | kNewsServers | kDirectoryServices
			 | kMediaServers | kRemoteApplications -- which network services to show
	editable [pedu] <bool> (optional) -- Allow user to type in a URL?
	app : aem.send.Application -- the application to use (default = kCurrentApplication)
	Result: str -- the URL chosen


#######
# Clipboard Commands Suite -- Access to the Clipboard in applications

setclipboard(data) -- Place data on an application's clipboard. Activate the target application first
	data : anything -- the data to place on the clipboard


getclipboard(desiredtype=None) -- Return the contents of an application's clipboard. Activate the target application first
	desiredtype : str -- 4-letter code; the type of data desired (see also clipboardinfo)
	Result: list of anything -- the data from its clipboard


clipboardinfo(desiredtype=None) -- Return information about the clipboard
	desiredtype : str -- 4-letter code; restricts result to information about only this data type
	Result: list of list -- one list of [data type, size] for each type of data on the clipboard


#######
# Scripting Commands Suite -- Commands to work with scripts

loadscript(path) -- Return a script object loaded from a specified disk file
	path : str -- the file containing the script object to load
	Result: AEDesc -- the script object loaded (an AEDesc of typeScript)


storescript(script, path, replacing=kAsk) -- Store a script object into a file
	script : AEDesc -- the script object to store (an AEDesc of typeScript)
	path : str -- the file to store the script object in
	replacing : kYes | kAsk | kNo -- control display of Save As dialog; default is kAsk


runscript(script, parameters=[], component='AppleScript') -- Run a specified OSA script or script file.
	script : str | Alias | FSSpec -- the script text, an alias or file reference of a script file, or an AEDesc of typeScript to run
	[parameters : list of anything -- list of parameters
	[component : str -- the scripting component to use; default is AppleScript
	Result: anything -- the result of running the script


scriptingcomponents() -- Return a list of all scripting components (e.g. AppleScript)
	Result: <TEXT> (list) -- a list of installed scripting components


#######
# Miscellaneous Commands Suite -- Other useful commands

setvolume(level) -- Set the sound output volume
	level : int -- the volume level, from 0 (silent) to 7 (full volume)


systemattribute(attribute, testbits=None) -- Test attributes of this computer
	attribute : str -- 4-letter code; the attribute to test (either a "Gestalt" value or a shell environment variable). # TO CHECK: Which codes? Does it take long strings too? (Apple's documentation is hopeless...)
	testbits : int -- test specific bits of response
	Result: int | str -- the result of the query (or a list of all environment variables, if no attribute is provided)


pathto(location, domain=None, asstring=False) -- Returns full path name to the folder specified
	location : kApplicationSupport | kCurrentUser | kDesktop | kDesktopPictures | kFolderActions | kFonts | kHelp | kKeychain
			| kModemScripts | kPreferences | kPrinterDescriptions | kScriptingAdditions | kScripts | kSharedLibraries 
			| kStartupDisk | kSystem | kSystemPreferences | kTemporaryItems | kTrash | kUsers | kVoices -- the folder to return
	domain : kNetworkDomain | kSystemDomain | kLocalDomain | kUserDomain -- where to look for the indicated folder
	asstring : boolean -- return unicode string (Mac path) instead of alias
	Result: macfile.Alias | str -- the path name to the folder or application specified


======================================================================
CLASSES

CommandError(Exception) -- re-exported from aem for convenience


UserCancelled(Exception) -- user clicked Cancel button in displaydialog, etc.


======================================================================
NOTES

- When running commands that display dialogs (displaydialog, choosefile, etc.) in Python 2.3.x, use pythonw, not python, otherwise a 'user interaction not allowed' error will occur. (This is not an issue in MacPython 2.4.3+, where pythonw is not required for a Window Manager connection.)

- Standard Additions command wrappers currently don't implement parameters added in OS X 10.3 and later.


======================================================================
COPYRIGHT

(C) 2006 HAS
