TO DO

============================ aem ============================


----------------------------------------------------------------------
Following will probably be rejected as too hard or not important enough to do:

- following should work but doesn't:

	Application('/System/Library/CoreServices/Finder.app').event('coregetd', {'----': app.elements('pcap')}).send()
	# aem.send.send.CommandError: CommandError -1799: Mac OS error code -1799

(Might be related to keyAddressAttr/keyOriginalAddressAttr, as appscript packs these attributes differently to AppleScript.)


- Any other Python/AE type/class unpack routines needed? (See [e.g.] AEDataModel.h) e.g.:

	- typeDecimalStruct ? # preferred

	- typeExtended ? Float80; coerce to type128BitFloatingPoint and decode that? # non-preferred
	- typeAEText ?
	- typeTextStyles


- find a way to avoid GUI process starting when running from python2.4/python2.5; calling Process Manager functions (GetNextEvent, GetProcessBundleLocation, LaunchApplication) seems to trigger this. e.g. Might be BSD APIs that could be used instead.


- support for default 'open' events (i.e. where aevtodoc event is passed via LaunchApplication)


- Following examples should evaluate as True:

print its.ne(3) == its.eq(3).NOT
print its == its.eq(True)

(Solution would be to resolve both [e.g. into simple lists?] and compare the resolved versions which should both share the same form.)


============================ appscript ============================


- See also TO DO in terminology.py:

	# TO DO: testing indicates that where name+code clashes occur, classes have highest priority, followed by properties, with enums last; currently this code gives higher priority to enums:


- Allow multiple instances of same application to be launched and/or controlled. (Currently clients can launch new instances themselves, then create Application objects using their PIDs.)

----------------------------------------------------------------------
Following will probably be rejected as too hard or not important enough to do:


- improve rendering when a custom root is used


- Introspection support? (Do clients really need ability to examine references' structure? What about getting lists of supported property, element, type, enum and command names, as in rb-appscript?)


============================ mactypes ============================

----------------------------------------------------------------------
Following will probably be rejected as too hard or not important enough to do:

- make comparisons more robust? make hashes smarter (if possible)? (note: if clients need to perform more sophisticated, e.g. case-insensitive, comparisons, particularly for File objects, they should probably do this themselves)


============================ osax ============================

- full 64-bit support


============================ misc ============================


