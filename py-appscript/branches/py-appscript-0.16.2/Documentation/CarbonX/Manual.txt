CarbonX

----------------------------------------------------------------------
SUMMARY

This package installs modified versions of Carbon.AE and Carbon.OSA and their associated constants modules into the CarbonX namespace.

See also <http://developer.apple.com/documentation/Carbon/Reference/Open_Scripti_Architecture/index.html>, <http://developer.apple.com/documentation/Carbon/AppleScript-date.html>

----------------------------------------------------------------------
CLASSES

OSAComponentInstance -- a connection to an OSA language component
	
	Constructor:
		OSAComponentInstance(componentInstance)
			componentInstance : ComponentInstance -- a Carbon.Cm component instance created with, e.g. OpenDefaultComponent

	Methods:
		# Saving and Loading Script Data
	
		OSAStore(OSAID scriptID, DescType desiredType, long modeFlags) -> (AEDesc resultingScriptData)
			Gets a handle to script data in the form of a storage descriptor record.
	
		OSALoad(AEDesc scriptData, long modeFlags) -> (OSAID resultingScriptID)
			Loads script data.
	
		OSALoadFile(FSRef scriptFile, long modeFlags) -> (OSAID resultingScriptID, long storable) -- 10.3+
			Loads a script from the specified file into the specified scripting component, compiling the script if the file is a text file.
	
		OSAStoreFile(OSAID scriptID, DescType desiredType, long modeFlags, FSRef scriptFile) -> None -- 10.3+
			Stores a script into the specified file.
	
	
		# Executing and Disposing of Scripts
	
		OSAExecute(OSAID compiledScriptID, OSAID contextID, long modeFlags) -> (OSAID resultingScriptValueID)
			Executes a compiled script or a script context. 
	
		OSADisplay(OSAID scriptValueID, DescType desiredType, long modeFlags) -> (AEDesc resultingText)
			Converts a script value to text. Your application can then use its own functions to display this text to the user. 
	
		OSAScriptError(OSType selector, DescType desiredType) -> (AEDesc resultingErrorDescription)
			Gets information about errors that occur during script execution. 
	
		OSADispose(OSAID scriptID) -> None
			Reclaims the memory occupied by script data. 
	
	
		# Setting and Getting Script Information
	
		OSASetScriptInfo(OSAID scriptID, OSType selector, long value) -> None
			Sets information about script data according to the value you pass in the selector parameter. 
	
		OSAGetScriptInfo(OSAID scriptID, OSType selector) -> (long result)
			Obtains information about script data according to the value you pass in the selector parameter. 
	
	
		# Compiling Scripts
	
		OSAScriptingComponentName() -> (AEDesc resultingScriptingComponentName)
			Gets the name of a scripting component. 
	
		OSACompile(AEDesc sourceData, long modeFlags, OSAID previousAndResultingScriptID) -> (OSAID previousAndResultingScriptID)
			Compiles the source data for a script and obtain a script ID for a compiled script or a script context. 
	
		OSACopyID(OSAID fromID) -> (OSAID toID)
			Updates script data after editing or recording and to perform undo or revert operations on script data.
	
	
		# Getting Source Data
	
		OSAGetSource(OSAID scriptID, DescType desiredType) -> (AEDesc resultingSourceData)
			Decompiles the script data identiÞed by a script ID and obtain the equivalent source data. 
	
	
		# Coercing Script Values
	
		OSACoerceFromDesc(AEDesc scriptData, long modeFlags) -> (OSAID resultingScriptID)
			Obtains the script ID for a script value that corresponds to the data in a descriptor record. 
	
		OSACoerceToDesc(OSAID scriptID, DescType desiredType, long modeFlags) -> (AEDesc result)
			Coerces a script value to a descriptor record of a desired descriptor type. 
	
	
		# Recording Scripts
	
		OSAStartRecording(OSAID compiledScriptToModifyID) -> (OSAID compiledScriptToModifyID)
			Turns on Apple event recording and records subsequent Apple events in a compiled script. 
	
		OSAStopRecording(OSAID compiledScriptID) -> None
			Turns off Apple event recording. 
	
	
		# Executing Scripts in One Step
	
		OSALoadExecute(AEDesc scriptData, OSAID contextID, long modeFlags) -> (OSAID resultingScriptValueID)
			Loads and executes a script in a single step rather than calling OSALoad and OSAExecute.
	
		OSACompileExecute(AEDesc sourceData, OSAID contextID, long modeFlags) -> (OSAID resultingScriptValueID)
			Compiles and executes a script in a single step rather than calling OSACompile and OSAExecute. 
	
		OSADoScript(AEDesc sourceData, OSAID contextID, DescType desiredType, long modeFlags) -> (AEDesc resultingText)
			Compiles and executes a script and convert the resulting script value to text in a single step rather than calling OSACompile, OSAExecute, and OSADisplay. 
	
		OSADoScriptFile(FSRef scriptFile, OSAID contextID, DescType desiredType, long modeFlags) -> (AEDesc resultingText) -- 10.3+
			Loads a script from the specified file, compiles the script if the file is a text file, executes the script, converts the resulting script value to text, and stores the script back into the file if the script has persistent properties and the file is not a text file.
	
		OSALoadExecuteFile(FSRef scriptFile, OSAID contextID, long modeFlags) -> (OSAID resultingScriptValueID) -- 10.3+
			Loads a script from the specified file into the specified scripting component, compiles the script if the file is a text file, and executes the script.
	
	
		# Using Script Contexts to Handle Apple Events
	
		OSAExecuteEvent(AppleEvent theAppleEvent, OSAID contextID, long modeFlags) -> (OSAID resultingScriptValueID)
			Handles an Apple event with the aid of a script context and obtains a script ID for the resulting script value. 
	
		OSADoEvent(AppleEvent theAppleEvent, OSAID contextID, long modeFlags) -> (AppleEvent reply)
			Handles an Apple event with the aid of a script context and obtains a reply event. 
	
		OSAMakeContext(AEDesc contextName, OSAID parentContext) -> (OSAID resultingContextID)
			Gets a script ID for a new script context. 
	
		OSASetResumeDispatchProc(EventHandlerProc handler) -> None
			Sets the resume dispatch function called by a scripting component during execution of an AppleScript continue statement or its equivalent. [1]
	
		OSAGetResumeDispatchProc() -> EventHandlerProc handler
			Gets the resume dispatch function currently being used by a scripting component instance during execution of an AppleScript continue statement or its equivalent
	
	
		# Manipulating the Active Function
	
		OSASetActiveProc(ActiveProc handler) -> None")
			Sets the active function that a scripting component calls periodically while executing a script.
	
		OSAGetActiveProc() -> (ActiveProc handler)
			Gets a pointer to the active function that a scripting component is currently using. 
	
		OSASetActiveProc() argument may be a Python function or ActiveUPPWrapper instance (a callable C proc wrapper previously obtained via OSAGetActiveProc)
	
	
		# Manipulating the Create and Send Functions
	
		OSASetCreateProc(CreateAppleEventProc handler)
			Specifies a create function that a scripting component should use instead of the Apple Event ManagerÕs AECreateAppleEvent function when creating Apple events. 
	
		OSAGetCreateProc() -> (CreateAppleEventProc handler)
			Gets a pointer to the create function that a scripting component is currently using to create Apple events. [2]
	
		OSASetSendProc(SendProc handler) -> None
			Specifies a send function that a scripting component should use instead of the Apple Event MangerÕs AESend function when sending Apple events.  [3]
	
		OSAGetSendProc() -> (SendProc handler)
			Gets a pointer to the send function that a scripting component is currently using.
	
		OSASetDefaultTarget(AEAddressDesc target) -> None
			Sets the default target application for Apple events.
	
	
		# Using Component-Specific Routines [4]
	
		OSAGetScriptingComponentFromStored(AEDesc scriptData) -> ScriptingComponentSelector scriptingSubType
			Gets the subtype code for a scripting component that created a storage descriptor record. 
	
		OSAGetScriptingComponent(ScriptingComponentSelector scriptingSubType) -> OSAComponentInstance scriptingInstance
			Gets the instance of a scripting component for a speciÞed subtype.
	
		OSAGenericToRealID(OSAID theScriptID) -> (OSAID theScriptID, ComponentInstance theExactComponent)
			Converts a generic script ID to the corresponding component-speciÞc script ID. 
	
		OSARealToGenericID(OSAID theScriptID, ComponentInstance theExactComponent) -> OSAID theScriptID
			Converts a component-speciÞc script ID to the corresponding generic script ID. 
	
	
		# Getting and Setting the Default Scripting Component
	
		The default scripting component for any instance of the generic scripting component is initially AppleScript, but you can change it if necessary. 
	
		OSAGetDefaultScriptingComponent() -> ScriptingComponentSelector scriptingSubType
			Gets the subtype code for the default scripting component associated with an instance of the generic scripting component. 
	
		OSASetDefaultScriptingComponent(ScriptingComponentSelector scriptingSubType) -> None
			Sets the default scripting component associated with an instance of the generic scripting component. 
	
	
		# Miscellaneous
	
		OSASetHandler(long modeFlags, OSAID contextID, AEDesc handlerName, OSAID compiledScriptID) -> None
			Sets a specified script handler in the specified script to the supplied handler.
	
		OSAGetHandler(long modeFlags, OSAID contextID, AEDesc handlerName) -> (OSAID resultingCompiledScriptID)
			Gets a script ID for the specified script handler from the specified script.
	
		OSAGetHandlerNames(long modeFlags, OSAID contextID) -> (AEDescList resultingHandlerNames)
			Gets a list of all handler names in the specified script as an AEDescList of descriptors of type typeChar.
	
		OSASetProperty(long modeFlags, OSAID contextID, AEDesc variableName, OSAID scriptValueID) -> None
			Sets the value of a script property in a specified script
	
		OSAGetProperty(long modeFlags, OSAID contextID, AEDesc variableName) -> (OSAID resultingScriptValueID)
			Gets the value of a specified script property from a specified script.
	
		OSAGetPropertyNames(long modeFlags, OSAID contextID) -> (AEDesc resultingPropertyNames)
			Gets a list of all property names from the specified script.
	
	
		# Initializing AppleScript
	
		ASInit(long modeFlags, long minStackSize, long preferredStackSize, long maxStackSize, long minHeapSize, long preferredHeapSize, long maxHeapSize) -> None
			Initializes the AppleScript component. 
	
	
		# Getting and Setting Styles for Source Data
	
		ASGetSourceStyles() -> AEDescList sourceStyles
			Gets the script format styles currently used by the AppleScript component to display scripts. 
	
		ASSetSourceStyles(AEDescList sourceStyles) -> None
			Sets the script format styles used by the AppleScript component to display scripts. 
	
		ASGetSourceStyleNames(long modeFlags) -> AEDescList resultingSourceStyleNamesList
			Obtains a list of style names that are each formatted according to the script format styles currently used by the AppleScript component.


-------

[1] OSASetResumeDispatchProc() argument may be a Python function or EventHandlerUPPWrapper instance (a callable C proc wrapper previously obtained via OSAGetResumeDispatchProc) or a 2-item tuple whose first item is one of the following constants:
 - kAENoDispatch = 0
- kAEUseStandardDispatch = 0xFFFFFFFF 
and whose second item may be 0 or, if first item is kAEUseStandardDispatch, may optionally be constant:
 - kOSADontUsePhac = 0x0001

[2] OSASetCreateProc() argument may be a Python function or CreateAppleEventUPPWrapper instance (a callable C proc wrapper previously obtained via OSAGetCreateProc)
	
[3] OSASetSendProc() argument may be a Python function or SendUPPWrapper instance (a callable C proc wrapper previously obtained via OSAGetSendProc)

[4] Component-specific method notes: 
- You canÕt use the generic scripting component to call a component-speciÞc routine. Instead, you must use an instance of the speciÞc scripting component that supports the routine. 
- To facilitate the use of component-speciÞc routines, the generic scripting component allows you to identify the scripting component that created stored script data, get an instance of a speciÞed scripting component, and convert between generic script IDs and component-speciÞc script IDs.
- These methods should be called on a generic ('scpt') OSA component instance.

----------------------------------------------------------------------
NOTES

- Do not mix CarbonX.AE/Carbon.OSA with Carbon.AE/Carbon.OSA-based code as types and functions defined by one are incompatible with types and functions defined by the other. Doing so will result in TypeErrors.

----------------------------------------------------------------------
THANKS

- Many thanks to: Bob Ippolito, Marco Piovanelli

----------------------------------------------------------------------
COPYRIGHT

Portions Copyright (c) 2005 HAS

Portions Copyright (c) 1998-2003 Marco Piovanelli

Copyright (c) 2001-2005 Python Software Foundation.
