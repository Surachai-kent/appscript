osaterminology.sax.aeteparser

----------------------------------------------------------------------
SUMMARY

A simple SAX-like aete/aeut terminology parser.


----------------------------------------------------------------------
FUNCTIONS

parse(aetes, receiver) -- Parse raw binary aete/aeut data
	aetes : str | list of str -- one or more aete/aeut binary resources obtained via osaterminology.getterminology module
	receiver : Receiver -- object to handle events generated as aete is parsed; typically a subclass of Receiver


----------------------------------------------------------------------
CLASSES

Receiver -- object to handle events generated as aete is parsed; clients should subclass and override some or all of its methods to do useful work
	Constructor:
		Receiver()

	Methods:
		start_suite(code, name, description) -- defines a suite containing zero or more commands, classes and enumerations
			code : str -- 4-letter code identifying event parameter's label
			name : unicode -- event parameter's English name
			description : unicode -- a short description


		start_command(code, name, description, directarg, reply) -- defines a command (Apple event); may contain zero or more labelled arguments
			code : str -- 8-letter code identifying event's class and id
			name : unicode -- event's English name
			description : unicode -- a short description
			directarg : tuple -- a tuple of form: (description, datatype, isOptional, isList, isEnum)
			reply : tuple -- a tuple of form: (description, datatype, isOptional, isList, isEnum)


		add_labelledarg(code, name, description, datatype, isoptional, islist, isenum) -- defines a labelled argument to a command
			code : str -- 4-letter code identifying event parameter's label
			name : unicode -- event parameter's English name
			description : unicode -- a short description
			datatype : str -- 4-letter code identifying type of parameter's value (or type of items in list if isList is True)
			isoptional : bool -- is this parameter optional?
			islist : bool -- does the parameter take a list of values?
			isenum : bool -- is this value an enumerated type?


		end_command()


		start_class(code, name, description) -- defines a class; may contain zero or more superclasses, properties and elements
			code : str -- 4-letter code identifying class
			name : unicode -- class's English name; name may be singular (commonly used in referring to individual classes) 
					or plural (commonly used in referring to an object's elements) - see also is_plural()
			description : unicode -- a short description


		is_plural() -- indicates this class definition provides the plural name for another class with the same code


		add_superclass(datatype) -- defines a superclass to a class
			datatype : str -- 4-letter code identifying superclass's class


		add_property(code, name, description, datatype, islist, isenum, ismutable)
			code : str -- 4-letter code identifying a property
			name : unicode -- property's English name
			description : unicode -- a short description
			datatype : str -- 4-letter code identifying type of property's value (or type of items in list if isList is True)
			islist : bool -- does the property hold a list of values?
			isenum : bool -- is this value an enumerated type?
			ismutable : bool -- can this property's value be changed?


		start_element(datatype)
			datatype : str -- 4-letter code identifying class of the element


		add_supportedform(code)
			code : str -- 4-letter code identifying a supported element reference form for this element
					(formName/formAbsolutePosition/formUniqueID/formRelativePosition/formRange/formTest)


		end_element()


		end_class()


		start_enumeration(code) -- defines a group of enumerators
			code : str -- 4-letter code identifying a group of enumerators


		add_enumerator(code, name, description)
			code : str -- 4-letter code identifying an enumerator
			name : unicode -- enumerator's English name
			description : unicode -- a short description


		end_enumeration()


		end_suite()


----------------------------------------------------------------------
NOTES

- aete/aeut data returned by getterminology functions contains endian-sensitive information; aeteparser knows how to handle this, assuming retrieval and parsing are both done on the same architecture

----------------------------------------------------------------------
COPYRIGHT

(C) 2005 HAS
