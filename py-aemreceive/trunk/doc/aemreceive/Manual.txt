aemreceive

======================================================================
SUMMARY

A simple Apple event handling framework for Python-based applications.

======================================================================
DESCRIPTION

(Note: PyObjC-based applications can use the Cocoa APIs instead.)

======================================================================
CONSTANTS

The following constants are exported by the top-level aemreceive module:

------- Parameter constants -------

kArgDesc -- Used in installeventhandler where a parameter should be passed directly to eventcallback as an AEDesc without unpacking or typechecking

kArgMissingValue -- Used in installeventhandler to indicate that a 'missing value' constant is an acceptable parameter, e.g. ArgMultiChoice(kae.typeUnicodeText, kArgMissingValue)

kArgAny -- Used in installeventhandler to indicate that any type of descriptor is an acceptable parameter

kArgNull -- Used in installeventhandler to indicate that a null descriptor is an acceptable parameter


------- Result constants -------

kMissingValue -- The 'missing value' constant. Event handlers that sometimes return a result should return kMissingValue, not None, when they have no other value to return. (Only event handlers that never return a result should return None.)


------- Other constants -------

kae -- aemreceive re-exports aem's kae constants module for convenience; contains a range of common AE type constants useful when declaring event parameters' types


======================================================================
FUNCTIONS

installeventhandler(eventcallback, eventcode, *parameterdefinitions, codecs=_standardCodecs) -- Install an Apple event handler.
	eventcallback : function -- the callback function invoked to process the Apple event
	eventcode : str -- 8-letter code indicating the Apple event handler's event class and id
	*parameterdefinitions : tuple -- zero or more three-item tuples, each mapping an Apple event parameter to an eventcallback parameter [1]
	codecs : Codecs -- the Codecs object to use when unpacking the Apple event's parameters and packing the return value

removeeventhandler(eventcode) -- Remove an installed Apple event handler.
	eventcode : str -- 8-letter code indicating the Apple event handler's event class and id

installcoercionhandler(coercioncallback, fromtype, totype) -- Install an AEDesc coercion handler.
	coercioncallback : function -- the callback function invoked to process the Apple event

removecoercionhandler(fromtype, totype) -- Remove an installed AEDesc coercion handler.


-------

[1] Each tuple takes the form:

	(eventparametercode, callbackparametername, desiredtype)

		eventparametercode : str -- a 4-character string
		callbackparametername : str -- the name of the eventcallback parameter to which the event parameter's value should be bound
		desiredtype : ArgType | ArgEnum | ArgListOf | ArgMultiChoice | kArgDesc -- an object describing the parameter's accepted type(s) or values; aemreceive will apply any necessary coercion to the event parameter's value and unpack it automatically unless kArgDesc is used, in which case it will pass the original AEDesc unmodified

======================================================================
CALLBACKS

eventcallback(**kargs) -- the callback function called by an event handler; registered by installeventhandler()
	kargs : anything -- the event's parameters, bound to names specified via installeventhandler() [1]
	Result : anything | None -- the reply value, or None if the event handler does not return one; see also the kMissingValue constant

 
coercioncallback(value, totype) -- the callback function called by a coercion handler; registered by installcoercionhandler(); note: if an error is raised during execution, a coercion error -1700 is automatically returned instead
	value : AEDesc -- the descriptor containing the data to coerce
	totype : str -- the desired OSType for the new descriptor
	Result : AEDesc -- the new descriptor


-------

[1] If an 'attributes' parameter is also included, the Apple event's attributes will be passed to it as a dict.

======================================================================
CLASSES

EventHandlerError(Exception) -- eventcallback functions should raise an EventHandlerError instance to send an error message back to client.
	Constructor:
		EventHandlerError(self, number, message=None, object=None, coercion=None)
			number : int -- a MacOS error number
			message : str | unicode -- user-readable error message; this is recommended for most types of errors
			object : anything -- the problem object, or an aem reference to it
			coercion : aem.AEType -- in error -1700, the type to which the object could not be coerced

--

Codecs(aem.Codecs) -- used to pack and unpack AEDescs (same as aem.Codecs except that None is packed as 'missing value' constant instead of 'null'); may be subclassed for use in installeventhandler()


AEType -- re-exported from aem for convenience; see aem documentation for more info


AEEnum -- re-exported from aem for convenience; see aem documentation for more info

--

 ArgType -- Describes an AE type; used in installeventhandler() to declare a parameter's desired type [1]
	Constructor:
		ArgType(self, code)
			code : str -- a 4-character AE code


ArgEnum -- Describes an AE enumeration; used in installeventhandler() to declare a parameter's desired values
	Constructor:
		ArgEnum(self, *codes)
			*codes : str -- 4-character AE codes, one for each enumerator in the enumeration


ArgListOf -- Describes a list of values; used in installeventhandler() to declare a parameter's desired type
	Constructor:
		ArgListOf(self, datatype)
			datatype : ArgType | ArgEnum | ArgMultiChoice -- the desired type(s)/enumerators of the list's items


ArgMultiChoice -- Allows multiple acceptable types to be declared; used in installeventhandler() to declare a parameter's desired types/values [1][2]
	Constructor:
		ArgMultiChoice(self, *datatypes)
			*datatypes : ArgType | ArgEnum | ArgListOf -- the desired types/values


-------

[1] For convenience, aemreceive also allows ArgType objects to be specified as plain strings and ArgMultiChoice objects as lists whereever these values are used; e.g. 'utxt' and ArgType('utxt') are interchangeable, as are ['long', 'doub'] and ArgMultiChoice(ArgType('long'), ArgType('doub')) or any combination thereof.

[2] If event parameter's type matches one of those given, it will be unpacked as that type. If not, aemreceive will attempt to coerce it to each type in turn until one succeeds, in which case it is unpacked as that type, or all attempts fail, in which case a coercion error is returned to client.

======================================================================
MODULES

sfba -- Simple convenience module for constructing scriptable FBAs (faceless background applications). Intended primarily for use by AppleScript extension developers. Provides functions for starting and stopping a Carbon event loop, and re-exports aemreceive's contents for convenience.

	starteventloop() -- Start application's main event loop. Call this after all Apple event handlers are installed. Application will then remain open, handling incoming Apple events, until it is explicitly quit (e.g. upon receiving an 'aevtquit' event).

	stopeventloop() -- Stop application's main event loop. This is automatically called by the default 'quit' event handler. If installing a custom 'quit' event handler, remember to have it call this function at some point, otherwise the application can't be quit!


======================================================================
EXAMPLES

- Event handler:

def stripText(text, removing=None, fromEnd=AEEnum('Both')):
	endCode = fromEnd.code
	method = {'Left': text.lstrip, 'Rght': text.rstrip, 'Both': text.strip}[endCode]
	return method(removing)

installeventhandler(
		stripText,
		'TeCoStrp',
		('----', 'text', kae.typeUnicodeText),
		('Remo', 'removing', kae.typeUnicodeText),
		('From', 'fromEnd', ArgEnum('Left', 'Rght', 'Both'))
		)


- Coercion handler:

codecs = Codecs()

def coerceAETypeToUnicodeText(desc, totype):
	return codecs.pack(u'\u00abclass %s\u00bb' % codecs.unpack(desc).code)

installcoercionhandler(
		coerceAETypeToUnicodeText, 
		kae.typeType, 
		kae.typeUnicodeText)


======================================================================
COPYRIGHT

(C) 2004 HAS
