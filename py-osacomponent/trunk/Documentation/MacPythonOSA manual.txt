MacPythonOSA
0.2.0

======================================================================
IMPORTANT

- This is an early developer release, so is both incomplete and buggy. Use at your own risk, etc. For example, ae.host.event(...).resend() is currently seriously broken and will cause a fatal crash in most circumstances.

- Once built, the MacPythonOSA.component should be installed in /Library/Components or ~/Library/Components. You will usually need to restart OSA-aware applications before they register the new component.

======================================================================
SUMMARY

A Python OSA component.

======================================================================
DESCRIPTION

MacPythonOSA is Python interpreter repackaged as an OSA language component, allowing OSA scripts to be written in Python. It is intended to be a fully-fledged OSA component and as such has some usage differences to the standard [Mac]Python:

1. MacPythonOSA scripts are managed similarly to Python modules, being executed at load/compile time to initialise all top-level variables, functions, etc. prior to use. This means that global variables will retain their current state between runs until the script is recompiled/reloaded.
It also means that one or more top-level functions must be provided as entry points, e.g. a MacPythonOSA script intended for batch-processing use must provide a run(*args) function to be called when the script is run. Example:

def run(*args):
	return "Hello world!"

Note that this means MacPythonOSA is unsuitable for running conventional Python batch-processing scripts, unless they're modified to suit.


2. (Note: this feature isn't working yet.) MacPythonOSA redirects stdout and stderr to the host process as 'log' events. For example, running the following script in Script Editor:

def run(*args):
	print "Hello world!"

will cause "Hello world!" to appear in SE's Event Log pane [when visible].


3. MacPythonOSA doesn't support importing modules relative to a MacPythonOSA script as OSA is not filesystem-aware. It does, however, support module directories at /Library/MacPythonOSA/Modules and ~/Library/MacPythonOSA/Modules in addition to recognising the usual module directories defined by the Python framework. There is currently no support for importing OSA scripts as modules.


4. Compiled MacPythonOSA scripts (.scpt/.app) can contain persistent script data (see osastore) in addition to the script source code.


5. MacPythonOSA adds several top-level variables to each script before initialising it: 

- ae -- provides an aem-based API for sending Apple events using raw AE codes

- osastore -- provides a persistent data storage area; data stored here will be retained after script is saved to disk, and restored when script is loaded from disk

- [others to be decided; will include all functions, classes, etc. exported by appscript]

See the NOTES section for more information on these.


6. MacPythonOSA scripts can handle Apple events simply by declaring Apple event handler functions at the top level of the script. Example: save the following script as an applet, then drop one or more files/folders onto it:

from osax import say
def ae_aevtodoc(files): # 'open' event handler
	say("%i files were dropped" % len(files))

(Note: the current mechanism is due to change when terminology support is added.)


======================================================================
INTERFACE

======= ae module =======

The ae module re-exports the aem module's contents, plus the following:

host -- Host application: (note: very buggy - do not use!)


======= osastore =======

The osastore variable contains a new-style class instance to which you can add, get and remove any attribute at any time (essentially an easy-to-use facade for MacPythonOSA's persistence mechanism). To initialise attributes at compilation time, call osastore with one or more named arguments, e.g.:

osastore(
	var1 = 42
	var2 = []
	)

When a script is saved, MacPythonOSA will attempt to serialise the osastore object's attributes and store the result in its binary script ('scpt') structure along with the script's source code and other data. When the script is re-loaded, MacPythonOSA restores the osastore object's attributes to their previously stored state. The client application can also query the MacPythonOSA component to see if osastore's content has changed since the script was loaded. 

Note that this persistence mechanism is reliant on Python's pickle module, so can't handle complex values such as functions, classes and instances. Where it is unable to serialise/deserialise a value, the save/load operation will fail.


======================================================================
NOTES

======= About OSA =======

OSA scripts are commonly used in 'attachable' applications such as System Events and Mail to modify and extend their standard behaviour. An attachable application is one that allows OSA scripts to be attached to various objects - Script menus, objects within the application's Apple Event Object Model, etc. - to modify and extend the application's functionality. e.g. System Events allows scripts to be attached as Folder Actions and triggered when a filesystem folder is modified by the user; Mail allows scripts to be used as custom Mail Rule actions. 

OSA scripts are also heavily used in OSA-based application development kits such as AppleScript Studio and FaceSpan. (Note that AppleScript Studio and FaceSpan currently provide direct support for the AppleScript language only.)

The best known OSA language is Apple's own AppleScript language There are several other OSA languages of varying capabilities currently available:
- UserTalk <http://radio.userland.com>
- OSAShell <http://ranchero.com/software/osashell>
- JavaScriptOSA <http://www.latenightsw.com/freeware/JavaScriptOSA>
- TclOSA, PerlOSA, PythonOSA, PHPOSA, RubyOSA, ShOSA <http://homepage.mac.com/philip_aker/osa/osa.html>

OSA scripts are typically written using an OSA script editor such as Apple's own Script Editor or Late Night Software's Script Debugger. Compiled OSA script files typically have a .scpt extension. Be aware that some OSA editors may not recognise source code files with .py extensions; where this is the case you'll need to copy and paste source code between applications.


======= MacPythonOSA Caveats =======

- While some parts of MacPythonOSA are fully functional, there's a lot of jury-rigging and a few operations are still completely non-functional or stubbed. Many behaviours and APIs are still in flux at this point and all are subject to change.

- Some stuff may be implemented incorrectly in this release - there seems to be very little public Apple documentation on implementing OSA components (as opposed to using them), so some of this implementation is pretty much just educated guesswork. 


======= Other =======

- Offers of advice, assistance, additional documentation, etc. from anyone familiar with the finer points of OSA component design would be greatly appreciated!


======================================================================
AUTHOR

- has <hhas -at- users - sourceforge - net> <http://appscript.sourceforge.net>


======================================================================
THANKS

Many thanks to: Philip Aker, Bill Fancher, Bob Ippolito, Chris Nebel, Donovan Preston, Brent Simmons


======================================================================
COPYRIGHT

(C) 2005 HAS