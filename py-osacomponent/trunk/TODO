TO DO

- support code colorization in 10.5


- finish HTML-ising documentation


- in applets, calling osaterminology.getterminology.getaete at the script's top level results in infinite recursion, causing the script to crash, e.g.:

### start applet script ###

import osax

sa = osax.ScriptingAddition() # this will crash the applet

def run():
	sa.beep()

###  end applet script  ###

(Note that scripts run in Script Editor don't have this problem. Also, calling osaterminology.getterminology.getaete from within an event handler seems to work okay.)

(Note: there is a known OS issue with invoking OSAGetAppTerminology in Cocoa apps before the main event loop is started; this may or may not be related.)


- make script values executable? In the AppleScript component, scripts and values are effectively interchangeable, allowing clients to call OSAExecute on a script's return value. PyOSA currently doesn't allow this as scripts and values aren't interchangeable: scripts are Python modules and must have a run() function to be executable, whereas values are simple datatypes (ints, strings, lists, etc).


- support fully qualified object specifiers (used by e.g. Automator)


- see if it's possible to make script results display better in Script Debugger's 'Best' pane (single references don't display; references in lists/records display poorly; record keys also display poorly)


- finish sub-interpreter support


- add support for a config.py module that can be located at [~]/Library/PyOSA/2.x? If present, this would be executed each time a new script was created and would have access to PyOSA APIs, allowing additional configuration to be done (e.g. loading event handler definitions). (Question: what are security implications?)


- include prebuilt appscript packages for each Python version in component bundle and have PyOSA load one of these as appropriate instead of requiring Python interpreter to have a copy already installed.


- OSA library support?


- ability to run scripts starting with '#!...python' in non-OSA mode; i.e. a python subprocess, with run event's args (if any) passed to ARGV, and stdout and stderr piped to script results and script errors respectively?


- see also comments in source code


- anything else?



---------

- On 13 Mar 2008, at 04:05, Ned Deily wrote:
A postscript: as it turns out, I've subsequently discovered PyOSA as it currently exists won't work for my current use case.  Silly me - I hadn't realized that the third-party app, EagleFiler, with which I wanted to use python script handlers, is itself written in Python and apparently packaged with py2app.  In particular, it has its own private Python framework in the app bundle.  Noting in the code that PyOSA tries to handle that case but mainly just to satisfy my curiosity, I played around with it a bit, going as far as to install py-appscript and friends into its private site-packages.zip

You can install PyOSA-specific modules at:

	~/Library/PyOSA/2.x/site-packages
	/Library/PyOSA/2.x/site-packages

(where '2.x' is the Python version and sub-version, e.g. 2.5).
but then ran into the dead end of PyOSA being unable to bind to that framework ("Couldn't bind PyArg_ParseTuple") due to stripped binaries I gather.

Odd. I know that py2app strips redundant modules, but I wouldn't have thought it'd affect the Python binary. Did you ask Bob about this? It's not something I have time to investigate myself, but if I knew exactly what the problem was I might be able to provide a patch. As you say, PyOSA is meant to cope with this sort of scenario.


You were right to be skeptical about my lazy assumptions.

So.... After delving much deeper into it, it turns out that the root cause of that symptom was that the app bundle's private Python.framework did not have the customary symlinks to Python and Resources.

	nad@fimt:/Applications/EagleFiler.app/Contents/Frameworks/Python.framework$ ls -l
	total 16
	drwxr-xr-x  3 nad  admin  102 Mar 11 10:28 Versions

versus a normal Python framework build:

	nad@fimt:/Library/Frameworks/Python.framework$ ls -l
	total 24
	lrwxr-xr-x  1 root  admin   24 Feb 23 15:45 Headers -> Versions/Current/Headers
	lrwxr-xr-x  1 root  admin   23 Feb 23 15:45 Python -> Versions/Current/Python
	lrwxr-xr-x  1 root  admin   26 Feb 23 15:45 Resources -> Versions/Current/Resources
	drwxr-xr-x  3 root  admin  136 Feb 21 23:00 Versions

That's why createPythonFramework in pythonloader.c was not able to find the Python binary to bind to in the app's existing Python framework.  As a workaround, I manually added the symlinks for Python and Resources within the app's bundle and that got it past the binding issue but on to a much more serious problem.  More on that in a moment.

Since EagleFile.app appears to be created with py2app, I created a sample test app with py2app and noted that the app bundle also lacked the symlinks.  So there would seem to be two issues here: (1) should py2app be changed to create the symlinks? and (2) what, if anything, should PyOSA do to work around their lack in existing apps?

Moving on, with the symlinks in place, PyOSA initialization proceeds in createComponentInstanceStorage which calls addResourcesFolderToSysPath which calls PyImport_ImportModule (to import "sys") and down there in Python it crashes with what I assume to be a null pointer dereference, possibly _PyThread_GetFrame from PyEval_GetFrame in ceval.c from PyEval_GetGlobals from PyImport_Import from PyImport_ImportModule.  I don't see anything glaringly obvious - the crashed thread is the main app thread with a python instance initialized in the main app and no other python threads - but this certainly isn't my area of expertise.  Note that in the attached stack traces, PyOSA was built as a Debug target; the problem symptoms are the same with a standard Release target.  I was also able to reproduce the problem with identical results on a PPC G4 also running 10.5.2.

And that's where things stand.  I really can't put any more time into it right at the moment, though it's been a learning experience!

If you are interested in pursuing this further, here's a stripped-down test procedure:

0. Install PyOSA and appscript from svn trunk.

1. Download and install EagleFiler (free 30-day demo)
	<http://c-command.com/downloads/EagleFiler-1.3.dmg>

2. Launch EagleFiler.  Create New Library.

3. Launch Console.app. Launch Terminal.app.  With focus on Terminal.app window, press F1.  Note EF message "Capture Not Supported...".  Cancel and quit EF.

4. In Script Editor, create and compile a PyOSA script:
	def capture():
		print "Hello world"

  Save As.. [Run Only] to
    ~/Library/Application Support/EagleFiler/Capture Scripts/com.apple.Terminal.scpt

5. Launch EF. Focus on Terminal.app window, press F1.  Note EF message "AppleScript Compilation Error...".  Note in Console system.log "PyOSA Couldn't bind PyArg_ParseTuple".  Quit EF.

6. In terminal window:
	cd /Applications/EagleFiler.app/Contents/Frameworks/Python.framework
	ln -s Versions/2.5/Python Python
	ln -s Versions/2.5/Resources Resources

7. Launch EF. Focus on Terminal.app window, press F1.  Note EF crash!



----> FWIW, the python embedded in the app is 2.5.1:

nad@fimt:/Applications/EagleFiler.app/Contents$ MacOS/python
Python 2.5.1 (r251:54863, Apr 20 2007, 10:49:39)
[GCC 4.0.1 (Apple Computer, Inc. build 5367)] on darwin
Type "help", "copyright", "credits" or "license" for more information.
>>>

----> (Step 5) With no added symlinks:

Mar 15 19:21:50 fimt login[12489]: USER_PROCESS: 12489 ttys002
Mar 15 19:22:48 fimt GrowlHelperApp[11813]: EagleFiler registered
Mar 15 19:23:07 fimt [0x0-0x29e29e].com.c-command.EagleFiler[12505]: PyOSA: opening component instance
Mar 15 19:23:07 fimt [0x0-0x29e29e].com.c-command.EagleFiler[12505]: PyOSA: checking for private framework...
Mar 15 19:23:07 fimt [0x0-0x29e29e].com.c-command.EagleFiler[12505]: Creating CFBundle for Contents/Frameworks/Python.framework/
Mar 15 19:23:07 fimt [0x0-0x29e29e].com.c-command.EagleFiler[12505]: PyOSA: Couldn't bind PyArg_ParseTuple
Mar 15 19:23:07 fimt [0x0-0x29e29e].com.c-command.EagleFiler[12505]: PyOSA_main returned error: -1762
Mar 15 19:23:07 fimt [0x0-0x29e29e].com.c-command.EagleFiler[12505]: PyOSA: calling handleComponentClose()


----> (Step 7) With symlinks to both Python and Resources:

Mar 15 19:39:44 fimt [0x0-0x2a32a3].com.c-command.EagleFiler[12656]: PyOSA: opening component instance
Mar 15 19:39:44 fimt [0x0-0x2a32a3].com.c-command.EagleFiler[12656]: PyOSA: Using existing Python framework
Mar 15 19:39:44 fimt [0x0-0x2a32a3].com.c-command.EagleFiler[12656]: 	PyOSA component bundle path: /Users/nad/Library/Components/PyOSA.component
Mar 15 19:39:46: --- last message repeated 1 time ---
Mar 15 19:39:46 fimt ReportCrash[12661]: Formulating crash report for process EagleFiler[12656]


Exception Type:  EXC_BAD_ACCESS (SIGBUS)
Exception Codes: KERN_PROTECTION_FAILURE at 0x0000000000000008
Crashed Thread:  0

Thread 0 Crashed:
0   org.python.python             	0x003b59a1 PyInterpreterState_New + 213
1   org.python.python             	0x0038e02d PyEval_GetGlobals + 31
2   org.python.python             	0x003adec2 PyImport_Import + 33
3   org.python.python             	0x003ae11f PyImport_ImportModule + 33
4   ...sourceforge.appscript.pyosa	0x1a88e0c1 addResourcesFolderToSysPath + 44 (statemanager.c:82)
5   ...sourceforge.appscript.pyosa	0x1a88e43c createComponentInstanceStorage + 332 (statemanager.c:186)
6   ...sourceforge.appscript.pyosa	0x1a88c036 handleComponentOpen + 96 (main.c:23)
7   ...sourceforge.appscript.pyosa	0x1a88c102 PyOSA_main + 102 (main.c:51)
[...]

